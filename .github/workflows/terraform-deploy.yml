name: Terraform deploy
on:
  workflow_call:
    inputs:
      ARM_TENANT_ID:
        required: true
        type: string
      ARM_CLIENT_ID:
        required: true
        type: string
    secrets:
      token:
        required: true
      ssh_git:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      INFRACOST_API_KEY:
        required: true
  pull_request:
    types: [ closed ]
jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    env:
     working-directory: .
     # credentials for the app reg that as permissions over azure subscriptions and the storage account where the tfstate is stored
     ARM_CLIENT_ID: ${{ inputs.ARM_CLIENT_ID }}
     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
     ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}

    # this job will only run if the PR has been closed without being merged
    steps:
      - name: Check if PR was merged
        if: ${{ (github.event.pull_request.merged == false) }}
        run: |
          echo PR #${{ github.event.number }} has been closed without being merged
          exit 1

      # chechout de code from the source branch of the pull request to the agent's workspace
      - name: Check out code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.token }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Give permissions
        run: |
          sudo chmod -R ugo+rwX .

      # select the terraform workspace based on destination branch of the pull request trough this conditional variable apply
      - name: Sets env vars for release
        run: |
          echo "TERRAFORM_WORKSPACE=tst" >> $GITHUB_ENV
        if: ${{ (github.base_ref == 'integration') }}

      - name: Sets env vars for release
        run: |
          echo "TERRAFORM_WORKSPACE=pp" >> $GITHUB_ENV
        if: ${{ (github.base_ref == 'develop') }}

      - name: Sets env vars for release
        run: |
          echo "TERRAFORM_WORKSPACE=prd" >> $GITHUB_ENV
        if: ${{ (github.base_ref == 'main') }}

       # Configue the SSH public key to access the private repo that contains the terraform modules
       # We should generate the ssh key and store the private key as a secret in the current repo and add the public key in the target repo as a deploy key
       # cmd used to generate the prvate key: ssh-keygen -t ed25519 -a 100 -f "dir/private_key"
       #                                      ssh-keygen -p -f "dir/private_key" -m pem
      - name: Access to modules repository
        uses: webfactory/ssh-agent@v0.5.4
        with:
            ssh-private-key: ${{ secrets.ssh_git }}

      #- name: Download artifact
       # uses: dawidd6/action-download-artifact@v2
        #with:
         # github_token: ${{secrets.token}}
          # Required, workflow file name or ID
          #workflow: terraform-analysis.yml
          # Optional, the status or conclusion of a completed workflow to search for
          #workflow_conclusion: completed
          # Optional, will get head commit SHA
          #pr: ${{github.event.pull_request.number}}
          # Optional, directory where to extract artifact. Defaults to the artifact name (see `name` input)
          #path: ./plans
          # Optional, defaults to current repo
          #repo: ${{github.repository}}
          # Optional, check the workflow run whether it has an artifact
          # then will get the last available artifact from previous workflow
          # default false, just try to download from the last one
          #check_artifacts:  false
          
      - name: Get Run ID
        id: get_run_id
        run: |
          echo "::set-output name=run_id::$(\
            gh run list \
              --workflow terraform-analysis.yml \
              --json conclusion,headSha,status,databaseId \
              --jq ".[] | select( .conclusion == \"completed\") | .databaseId" \
          )"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: terraform-analysis.yml
          run_id: 2153758199 #${{ steps.get_run_id.outputs.run_id }} 
          # workflow_conclusion: success
          name: tfplan-${{ env.TERRAFORM_WORKSPACE }}-${{ github.event.pull_request.number}}
          commit: ${{ github.sha }}
          path: ./plans

      - name: Move artifact files
        run: |
          ls -la ./plans/tfplan-${{ env.TERRAFORM_WORKSPACE }}-${{ github.event.pull_request.number }}/
          cp ./plans/tfplan-${{ env.TERRAFORM_WORKSPACE }}-${{ github.event.pull_request.number }}/.terraform.lock.hcl .
          cp ./plans/tfplan-${{ env.TERRAFORM_WORKSPACE }}-${{ github.event.pull_request.number }}/* .
          ls -la
          sudo chmod -R ugo+rwX .
        working-directory: .
      
      # install terraform cli in the agent
      - name: Install terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      # initialize terrform
      - name: Terraform Version
        id: version
        run: sudo terraform version
      

      # initialize terrform
      - name: Terraform Init
        id: init
        run: terraform init

      # select the desired workspace
      - name: Terraform workspace select
        id: workspace
        run: terraform workspace select ${{ env.TERRAFORM_WORKSPACE }}

      - name: Terraform show
        run: terraform show tfplan -no-color
        working-directory: .

      - name: Terraform apply
        run: terraform apply -input=false -no-color tfplan 
        working-directory: .
